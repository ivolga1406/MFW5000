I have a kotlin program in android studio build with MVVM and MVI patterns and Jetpack compose. There is program:
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\Application.kt
package com.learn.american.english.mfw5000

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class Application: Application() {
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\Constants.kt
package com.learn.american.english.mfw5000

object Constants {

    //fireStore locations
    const val WORDS = "4000_words"

    //for ordering fireStore collections
    const val NUMBER = "number"


    //texts on buttons
    const val ADD = "Add"
    const val DISMISS = "Dismiss"


    const val SERIES_TITLE = "Type a series title..."
    const val DIFFICULTY = "Type the difficulty..."

    const val EMPTY_STRING = ""
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\MainActivity.kt
package com.learn.american.english.mfw5000

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.learn.american.english.mfw5000.ui.navigation.Navigation
import com.learn.american.english.mfw5000.ui.theme.MFW5000Theme
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.ExperimentalCoroutinesApi

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    @OptIn(ExperimentalCoroutinesApi::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MFW5000Theme {
                setContent {
                    Navigation()
                }
            }
        }
    }
}


File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\data\model\Item.kt
package com.learn.american.english.mfw5000.data.model

abstract class Item {

    open var id: String? = null
    open var number: Int? = 0
    open var word: String? = null
    open var part_of_speech: String? = null
    open var definition: String? = null
    open var example_en: String? = null
    open var example_ru: String? = null
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\data\model\Responce.kt
package com.learn.american.english.mfw5000.data.model

sealed class Response<out T> {
    object Loading: Response<Nothing>()

    data class Success<out T>(
        val data: T
    ): Response<T>()

    data class Failure(
        val e: Exception?
    ): Response<Nothing>()
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\data\model\Word.kt
package com.learn.american.english.mfw5000.data.model

data class Word(
    override var  id: String? = null,
    override var  number: Int? = 0,
    override var  word: String? = "",
    override var  part_of_speech: String? = null,
    override var  definition: String? = null,
    override var  example_en: String? = null,
    override var  example_ru: String? = null
):Item()




//data class Series(
//    override var id: String? = null,
//    override var title: String? = null,
//    override var difficulty: String? = null
//):Item()
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\data\repository\RepositoryImpl.kt
package com.learn.american.english.mfw5000.data.repository

import android.util.Log
import com.google.firebase.firestore.CollectionReference
import com.google.firebase.firestore.snapshots
import com.learn.american.english.mfw5000.Constants.NUMBER
import com.learn.american.english.mfw5000.data.model.Response
import com.learn.american.english.mfw5000.data.model.Word
import com.learn.american.english.mfw5000.ui.theme.Repository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import javax.inject.Inject
import javax.inject.Named
import javax.inject.Singleton

@Singleton
class RepositoryImpl @Inject constructor(
    @Named("WordsRef") private val wordsRef: CollectionReference
//    @Named("BooksRef") private val booksRef: CollectionReference,
//    @Named("ChaptersRef") private val chaptersRef: CollectionReference
): Repository {

//    override fun getWordsFromFirestore(): Flow<Response<List<Word>>> {
//        return wordsRef.orderBy(NUMBER).snapshots().map { snapshot ->
//            if (!snapshot.isEmpty) {
//                val series = snapshot.documents.mapNotNull { document ->
//                    document.toObject(Word::class.java)?.apply {
//                        id = document.id
//                    }
//                }
//                Response.Success(series)
//            } else {
//                Response.Failure(Exception("No data found"))
//            }
//        }
//    }

    override fun getWordsFromFirestore(): Flow<Response<List<Word>>> {
        return wordsRef.orderBy(NUMBER).limit(400).snapshots().map { snapshot ->
            if (!snapshot.isEmpty) {
                val books = snapshot.documents.mapNotNull { document ->
                    document.toObject(Word::class.java)?.apply {
                        id = document.id
                    }
                }
                Log.d("FirestoreData", "Retrieved documents: ${books.size}") // Log the size of retrieved documents
                Response.Success(books)
            } else {
                Log.d("FirestoreData", "No data found") // Log when no data is found
                Response.Failure(Exception("No data found"))
            }
        }
    }

}




File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\di\AppModule.kt
package com.learn.american.english.mfw5000.di

import android.content.Context
import android.provider.UserDictionary.Words.WORD
import com.google.firebase.firestore.CollectionReference
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import com.learn.american.english.mfw5000.Constants.WORDS
import com.learn.american.english.mfw5000.data.repository.RepositoryImpl
import com.learn.american.english.mfw5000.ui.theme.Repository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Named

@Module
@InstallIn(SingletonComponent::class)
object AppModule {
//    @Provides
//    fun provideSharedPreferencesHelper(@ApplicationContext context: Context): SharedPreferencesHelper {
//        return SharedPreferencesHelper(context)
//    }

    @Provides
    @Named("WordsRef")
    fun provideWordsRef() = Firebase.firestore.collection(WORDS)

    @Provides
    fun provideRepository(
        @Named("WordsRef") wordsRef: CollectionReference
    ): Repository = RepositoryImpl(wordsRef)
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\ViewModel.kt
package com.learn.american.english.mfw5000.ui

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.learn.american.english.mfw5000.data.model.Response
import com.learn.american.english.mfw5000.data.model.Word
import com.learn.american.english.mfw5000.ui.theme.Repository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ViewModel @Inject constructor(
//    private val sharedPreferencesHelper: SharedPreferencesHelper,
    private val repo: Repository,
): ViewModel() {

    var wordsResponse by mutableStateOf<Response<List<Word>>>(Response.Loading)
        private set

    init {
        getWords()
    }

    private fun getWords() = viewModelScope.launch {
        repo.getWordsFromFirestore().collect { response ->
            wordsResponse = response
        }
    }

}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\DeleteIcon.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.runtime.Composable

@Composable
fun DeleteIcon(
    deleteBook: () -> Unit
) {
    IconButton(
        onClick = deleteBook
    ) {
        Icon(
            imageVector = Icons.Default.Delete,
            contentDescription = "",
        )
    }
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\ItemCard.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.learn.american.english.mfw5000.data.model.Item

@Composable
fun ItemCard(
    word: Item,
    deleteBook: () -> Unit,
    onClick: (String?) -> Unit,
) {
    val cardElevation = CardDefaults.cardElevation(
        defaultElevation = 3.dp
    )
    Card(
        shape = MaterialTheme.shapes.small,
        modifier = Modifier
            .padding(
                start = 8.dp,
                end = 8.dp,
                top = 4.dp,
                bottom = 4.dp
            )
            .fillMaxWidth()
            .clickable { onClick(word.id)},
        elevation = cardElevation,
    ) {
        Row(
            modifier = Modifier.fillMaxWidth().padding(12.dp),
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Column {
                TextTitle(
                    bookTitle = word.word.orEmpty()
                )
                TextDifficulty(
                    difficulty = word.definition.orEmpty()
                )
            }
            Spacer(
                modifier = Modifier.weight(1f)
            )
//            DeleteIcon(
//                deleteBook = deleteBook
//            )
        }
    }
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\Items.kt
package com.learn.american.english.mfw5000.ui.composables

import android.widget.ProgressBar
import androidx.compose.runtime.Composable
import com.learn.american.english.mfw5000.data.model.Item
import com.learn.american.english.mfw5000.data.model.Response

@Composable
fun <T : List<Item>> Items(
    viewModelResponse: Response<T>,
    content: @Composable (items: T) -> Unit
) {
    when (viewModelResponse) {
        is Response.Loading -> ProgressBar()
        is Response.Success -> content(viewModelResponse.data)
        is Response.Failure -> print(viewModelResponse.e)
    }
}

File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\ItemsContent.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.learn.american.english.mfw5000.data.model.Item

@Composable
fun ItemsContent(
    padding: PaddingValues,
    items: List<Item>,
    deleteitem: (seriesId: String) -> Unit,
    onClick: (String?) -> Unit
) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(padding)
    ) {
        this.items(
            items = items
        ) { word ->

            ItemCard(
                word = word,
                deleteBook = {
                    word.id?.let { bookId ->
                        deleteitem(bookId)
                    }
                },
                onClick = onClick
            )
        }
    }
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\ProgressBar.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier

@Composable
fun ProgressBar() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ){
        CircularProgressIndicator()
    }
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\TextDifficulty.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.sp

@Composable
fun TextDifficulty(
    difficulty: String
) {
    Text(
        text = "$difficulty",
        color = Color.DarkGray,
        fontSize = 12.sp,
        textDecoration = TextDecoration.Underline
    )
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\TextTitle.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.sp

@Composable
fun TextTitle(
    bookTitle: String
) {
    Text(
        text = bookTitle,
        color = Color.DarkGray,
        fontSize = 25.sp
    )
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\composables\TopBar.kt
package com.learn.american.english.mfw5000.ui.composables

import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.learn.american.english.mfw5000.R
import androidx.compose.ui.graphics.vector.ImageVector

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TopBar(
    title: String = stringResource(R.string.app_name),
    navigationIcon: ImageVector? = null,
    onNavigationIconClick: () -> Unit = {}
) {
    TopAppBar(
        title = { Text(text = title) },
        navigationIcon = if (navigationIcon != null) {
            {
                IconButton(onClick = onNavigationIconClick) {
                    Icon(imageVector = navigationIcon, contentDescription = "Back")
                }
            }
        } else {
            {} // Provide an empty lambda when navigationIcon is null
        }
    )
}

File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\navigation\navigation.kt
package com.learn.american.english.mfw5000.ui.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import kotlinx.coroutines.ExperimentalCoroutinesApi

@ExperimentalCoroutinesApi
@Composable
fun Navigation() { // Kotlin functions should start with a capital letter
    val navController = rememberNavController()

    NavHost(navController = navController, startDestination = "words") {
        composable("words") {
            WordsScreen(navController = navController)
        }
    }
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\navigation\WordsScreen.kt
package com.learn.american.english.mfw5000.ui.navigation

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.learn.american.english.mfw5000.ui.ViewModel
import com.learn.american.english.mfw5000.ui.composables.Items
import com.learn.american.english.mfw5000.ui.composables.ItemsContent
import com.learn.american.english.mfw5000.ui.composables.TopBar

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WordsScreen(
    viewModel: ViewModel = hiltViewModel(),
    navController: NavController
) {
    Scaffold(
        topBar = {
            TopBar()
        },
        content = { padding ->
            // Use the appropriate composable for series
            Items(viewModelResponse = viewModel.wordsResponse,
                content = { word ->
                    // Apply the padding to the content
                    Box(modifier = Modifier.padding(padding)) {
                        ItemsContent(
                            padding = padding,
                            items = word,
                            deleteitem = { seriesId ->
//                                viewModel.deleteSeries(seriesId)
                            },
//                            onClick = { seriesId -> navController.navigate("books/${seriesId}")}
                            onClick = { }
                        )
                    }
                }
            )
        },
    )
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\theme\Color.kt
package com.learn.american.english.mfw5000.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\theme\Repository.kt
package com.learn.american.english.mfw5000.ui.theme

import com.learn.american.english.mfw5000.data.model.Response
import com.learn.american.english.mfw5000.data.model.Word
import kotlinx.coroutines.flow.Flow
import org.intellij.lang.annotations.Language

interface Repository {

    fun getWordsFromFirestore(): Flow<Response<List<Word>>>

}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\theme\Theme.kt
package com.learn.american.english.mfw5000.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun MFW5000Theme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
File: C:\Users\DellNotebookUser\AndroidStudioProjects\MFW5000\app\src\main\java\com\learn\american\english\mfw5000\ui\theme\Type.kt
package com.learn.american.english.mfw5000.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)


change the user interface and buizness logic of the program:
1) At start of the program, I wanna see list with items like this: '1-50', '51-100', '101-150' and so on.
2) if clicked on '1-50', I want to get first 50 words and show second screen wich is empty, if '51-100' was clicked, I want to get second 50 words and show second screen wich is empty, and so on
3) Get mp3 of the first word from Firebase Storage. Name of the mp3 file is equal to feild 'word'. Play mp3 file
4) If user swipe to the left - exclude the word from playing list, play sound of the next word
5) if user swipe to the right - show third screen with all information about the Item word. any swipe on that screen - return to the second screen and play next word.
6)  then you are in the end of the playing list - start again
7) when playing lost will be empty, give focus to first screen